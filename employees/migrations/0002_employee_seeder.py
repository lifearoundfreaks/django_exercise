# Generated by Django 2.2.1 on 2019-05-27 16:08

from django.db import migrations
from employees.models import (Employee,
                              Position,
                              get_appropriate_bosses,
                              Department,)
from names import get_first_name, get_last_name
from random import randint
from datetime import datetime, timedelta


def seeder(apps, schema_editor):
    DEPARTMENTS, HEAD_MANAGERS = 500, 10

    # How much dept. managers one head manager controls?
    MANAGERS = DEPARTMENTS // HEAD_MANAGERS

    # First, let's create positions. We need to create them in correct order,
    # otherwise the program would not be able to find appropriate bosses
    create_position("Managing Director", 100000, 1)
    create_position(
        "Head Manager", 60000, HEAD_MANAGERS, Position.objects.get(
            name="Managing Director"))
    create_position(
        "Department Manager", 30000, MANAGERS, Position.objects.get(
            name="Head Manager"))
    create_position("Maintenance worker", 5000, 7, Position.objects.get(
        name="Department Manager"))
    create_position("Team Lead", 50000, 4, Position.objects.get(
        name="Department Manager"))
    create_position("Programmer", 30000, 10, Position.objects.get(
        name="Team Lead"))
    create_position("Designer", 30000, 8, Position.objects.get(
        name="Team Lead"))
    create_position("Junior Programmer", 15000, 4, Position.objects.get(
        name="Team Lead"))

    # Now, let's create departments
    for n in range(1, DEPARTMENTS + 1):
        dept = Department(name="Department {}".format(n))
        dept.save()

    # Hiring a director
    director_position = Position.objects.get(name="Managing Director")
    create_empoyee(get_first_name(), get_last_name(), director_position)

    # Hiring head managers
    head_manager_position = Position.objects.get(name="Head Manager")
    for n in range(head_manager_position.expected_workers):
        create_empoyee(
            get_first_name(), get_last_name(),
            head_manager_position, Employee.objects.get(id=1)
        )

    # Hiring The rest of the staff
    positions = Position.objects.exclude(
        name="Managing Director").exclude(name="Head Manager")

    for position in positions:
        # First, find approptiate bosses for this position
        bosses = get_appropriate_bosses(position)
        # We'll keep track on departments to assign managers properly
        current_dept = 1
        # For each boss, create expected for this position number of workers
        for boss in bosses:
            for n in range(position.expected_workers):
                # If position is department manager, choose department
                if position.name == "Department Manager":
                    dept = Department.objects.get(id=current_dept)
                    current_dept += 1
                # Otherwise get department from boss
                else:
                    dept = boss.dept

                # Main part
                create_empoyee(
                    get_first_name(),
                    get_last_name(),
                    position, boss, dept
                )


def create_position(name, salary, workers, boss=None):
    position = Position(
        name=name,
        salary=salary,
        expected_workers=workers,
    )
    if boss:
        position.boss_position = boss
    position.save()


def create_empoyee(first_name, last_name, position, boss=None, dept=None):
    employee = Employee(
        first_name=first_name,
        last_name=last_name,
        position=position,
        salary=position.salary + randint(-10, 50) * 100,
        hiring_date=(datetime.now() - timedelta(days=randint(1, 600))).date(),
    )
    if boss:
        employee.boss = boss
    if dept:
        employee.department = dept
    employee.save()


class Migration(migrations.Migration):

    dependencies = [
        ('employees', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(seeder)
    ]
